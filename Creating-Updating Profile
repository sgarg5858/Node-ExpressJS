User model

const mongoose = require('mongoose');
const UserSchema= new mongoose.Schema({
    name: {
        type:String,
        required:true
    },
    email: {
        type:String,
        required:true,
        unique:true
    },
    password: {
        type:String,
        required:true
    },
    avatar: {
        type:String
    },
    date:{
        type:Date,
        default:Date.now
    }
});

module.exports= User = mongoose.model('user',UserSchema)

Profile Model

const mongoose = require('mongoose');
const ProfileSchema = new mongoose.Schema({
    user:{
        type:mongoose.Schema.Types.ObjectId,
        ref:'user'
    },
    company:{
        type:String
    },
    website:{
        type:String
    },
    location:{
        type:String
    },
    status:{
        type:String,
        required:true
    },
    skills:{
        type:[String],
        required:true
    },
    bio:{
        type:String
    },
    githubusername:{
        type:String
    },
    experience:[
        {
            title:{
                type:String,
                required:true
            },
            company:{
                type:String,
                required:true
            },
            location:{
                type:String
            },
            from:{
                type:Date,
                required:true
            },
            to:{
                type:Date
            },
            current:{
                type:Boolean,
                default:false
            },
            description:{
                type:String
            }
        }
    ],
    education:[
        {
            school:{
                type:String,
                required:true
            },
            degree:{
                type:String,
                required:true
            },
            fieldofstudy:{
                type:String
            },
            from:{
                type:Date,
                required:true
            },
            to:{
                type:Date
            },
            current:{
                type:Boolean,
                default:false
            },
            description:{
                type:String
            }
        }
    ],
    social:[
        {
            youtube: {
                type:String
            },
            facebook: {
                type:String
            },
            linkedin: {
                type:String
            },
            twitter: {
                type:String
            },
            instagram: {
                type:String
            }

        }
    ],
    date:{
        type:Date,
        default:Date.now
    }

});

module.exports= Profile = mongoose.model('profile',ProfileSchema);

Now Creating Updating

router.post('/',[auth,[
    check('status', 'Status is Required').not().isEmpty(),
    check('skills','Skills is required').not().isEmpty()
]], async(req,res,next)=>{

    //check  Validations...
    const errors=validationResult(req);
    if(!errors.isEmpty())
    {
        return res.status(400).json({errors:errors.array()});
    }

    const{company,website,location,bio,status,githubusername,skills,youtube,facebook,twitter,instagram,linkedin}
    =req.body

    //Build Profile Object
    const profileFields={};
    profileFields.user=req.user.id;
    if(company) profileFields.company=company;
    if(website) profileFields.website=website;
    if(location) profileFields.location=location;
    if(bio) profileFields.bio=bio;
    if(status) profileFields.status=status;
    if(githubusername) profileFields.githubusername=githubusername;
    if(skills) {
        profileFields.skills = skills.split(',').map((skill)=>skill.trim());
        // console.log(profileFields.skills);
    };
    //Build Social Object
    profileFields.social={};
    if(youtube) profileFields.social.youtube=youtube;
    if(facebook) profileFields.social.facebook=facebook;
    if(twitter) profileFields.social.twitter=twitter;
    if(instagram) profileFields.social.instagram=instagram;
    if(linkedin) profileFields.social.linkedin=linkedin;

    try{
        //user field is object id with mongoose we can use it like id instead of _id
        let profile= await Profile.findOne({user:req.user.id});

        //Update Profile
        if(profile)
        {
            profile= await Profile.findOneAndUpdate(
                {user : req.user.id},
                {$set : profileFields},
                {new : true}
                )
            return res.json(profile)
        }
        
        //create new profile
        profile=new Profile(profileFields);

        await profile.save();

        res.json(profile); 

    }catch(error)
    {
        console.error(error);
        res.status(500).send('Server Error');
    }
})
